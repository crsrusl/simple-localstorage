{"version":3,"sources":["../src/app.js"],"names":[],"mappings":";;;;;;IAAM,E;AACF,gBAAY,IAAZ,EAAkB;AAAA;;AACd,aAAK,IAAL,GAAY,QAAQ,KAAK,WAAL,EAApB;AACA,aAAK,KAAL,GAAa,EAAb;AACA,aAAK,KAAL;AACH;;;;;;;;;;;sCAOa;AACV,mBAAO,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,IAA8C,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,CAArD;AACH;;;;;;;;;gCAMO;AACJ,yBAAa,OAAb,CAAqB,KAAK,IAA1B,EAAgC,KAAK,SAAL,CAAe,KAAK,KAApB,CAAhC;AACH;;;;;;;;;;+BAOM,G,EAAK;AACR,gBAAM,KAAK,KAAK,WAAL,EAAX;AACA,gBAAI,EAAJ,GAAS,EAAT;;AAEA,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,KAAK,IAA1B,CAAX,CAAb;AACA,iBAAK,KAAL,CAAW,EAAX,IAAiB,GAAjB;AACA,mBAAO,KAAK,KAAL,EAAP;AACH;;;;;;;;;kCAMS;AACN,mBAAO,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,KAAK,IAA1B,CAAX,CAAP;AACH;;;;;;;;;;;oCAQW,K,EAAuB;AAAA;;AAAA,gBAAhB,MAAgB,yDAAP,KAAO;;AAC/B,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,KAAK,IAA1B,CAAX,CAAb;;AAEA,gBAAI,cAAc,EAAlB;AACA,gBAAI,UAAU,EAAd;;AAEA,iBAAK,IAAI,QAAT,IAAqB,KAArB,EAA4B;AACxB,oBAAI,MAAM,cAAN,CAAqB,QAArB,CAAJ,EAAoC;AAChC,gCAAY,IAAZ,CAAiB;AACb,6BAAK,QADQ;AAEb,kCAAU,MAAM,QAAN;AAFG,qBAAjB;AAIH;AACJ;;AAED,iBAAK,IAAI,SAAT,IAAsB,KAAK,KAA3B,EAAkC;AAC9B,oBAAI,KAAK,KAAL,CAAW,cAAX,CAA0B,SAA1B,CAAJ,EAA0C;AAAA;AACtC,4BAAI,SAAS,MAAK,KAAL,CAAW,SAAX,CAAb;AACA,4BAAI,QAAQ,KAAZ;;AAEA,oCAAY,OAAZ,CAAoB,UAAC,KAAD,EAAU;AAC1B,gCAAI,MAAM,QAAN,KAAmB,OAAO,MAAM,GAAb,CAAvB,EAA0C,QAAQ,IAAR,CAA1C,KACK,IAAI,MAAJ,EAAY,QAAQ,KAAR;AACpB,yBAHD;;AAKA,4BAAI,KAAJ,EAAW,QAAQ,IAAR,CAAa,MAAb;AAT2B;AAUzC;AACJ;;AAED,mBAAO,OAAP;AACH;;;;;;;;;;iCAOQ,E,EAAI;AACT,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,KAAK,IAA1B,CAAX,CAAb;AACA,gBAAM,UAAU,KAAK,KAAL,CAAW,EAAX,CAAhB;AACA,mBAAO,OAAP;AACH;;;;;;;;;;mCAOU,E,EAAI;AACX,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,aAAa,OAAb,CAAqB,KAAK,IAA1B,CAAX,CAAb;AACA,mBAAO,KAAK,KAAL,CAAW,EAAX,CAAP;AACA,mBAAO,KAAK,KAAL,EAAP;AACH;;;kCAES,E,EAAI,M,EAAQ;AAClB,iBAAK,KAAL,CAAW,EAAX,IAAiB,OAAO,MAAP,CAAc,KAAK,QAAL,CAAc,EAAd,CAAd,EAAiC,MAAjC,CAAjB;AACA,mBAAO,KAAK,KAAL,EAAP;AAEH","file":"app.js","sourcesContent":["class LS {\n    constructor(name) {\n        this.name = name || this._generateID();\n        this.store = {};\n        this._save();\n    }\n\n    /**\n     * Returns an ID which is used for new records or undefined localstorage store name\n     * @returns {String}\n     * @private\n     */\n    _generateID() {\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n\n    /**\n     * Sets localstorage to the internal store object\n     * @private\n     */\n    _save() {\n        localStorage.setItem(this.name, JSON.stringify(this.store));\n    }\n\n    /**\n     * Creates a new record and saves it to localstorage\n     * @param {Object} obj - The object to create\n     * @returns {*}\n     */\n    create(obj) {\n        const id = this._generateID();\n        obj.id = id;\n\n        this.store = JSON.parse(localStorage.getItem(this.name));\n        this.store[id] = obj;\n        return this._save();\n    }\n\n    /**\n     * Returns all records in localstorage\n     * @returns {Object}\n     */\n    findAll() {\n        return JSON.parse(localStorage.getItem(this.name));\n    }\n\n    /**\n     * Returns all records which match the query parameter\n     * @param {Object} query - The keys and values to match\n     * @param {Boolean} strict - If 'true' the entire query object will need to match the record\n     * @returns {Array}\n     */\n    findByQuery(query, strict = false) {\n        this.store = JSON.parse(localStorage.getItem(this.name));\n\n        let queryParams = [];\n        let results = [];\n\n        for (let queryKey in query) {\n            if (query.hasOwnProperty(queryKey)) {\n                queryParams.push({\n                    key: queryKey,\n                    property: query[queryKey]\n                });\n            }\n        }\n\n        for (let recordKey in this.store) {\n            if (this.store.hasOwnProperty(recordKey)) {\n                let record = this.store[recordKey];\n                let match = false;\n\n                queryParams.forEach((query)=> {\n                    if (query.property === record[query.key]) match = true;\n                    else if (strict) match = false;\n                });\n\n                if (match) results.push(record);\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     * Returns a single record matched by ID\n     * @param {String} id - The ID to used to find the record\n     * @returns {*}\n     */\n    findById(id) {\n        this.store = JSON.parse(localStorage.getItem(this.name));\n        const results = this.store[id];\n        return results;\n    }\n\n    /**\n     * Deletes a single record matched by ID\n     * @param {String} id - The ID used to find the record to delete\n     * @returns {*}\n     */\n    deleteById(id) {\n        this.store = JSON.parse(localStorage.getItem(this.name));\n        delete this.store[id];\n        return this._save();\n    }\n\n    updateOne(id, update) {\n        this.store[id] = Object.assign(this.findById(id), update);\n        return this._save();\n\n    }\n}"]}